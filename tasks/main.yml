---
- name: detect pipelining config origin
  run_once: True
  when:
  - inventory_hostname == ansible_play_hosts[0]
  - pipelining_config_origin is not defined
  register: pipelining_config_origin
  pipelining_config_origin:

- name: save inventory ssh pipelining status
  when:
  - pipelining_config_origin.msg | d == 'default'
  - ansible_pipelining_is_not_defined is not defined
  set_fact:
    ansible_pipelining_is_not_defined: "{{
      hostvars[inventory_hostname].ansible_ssh_pipelining is not defined
      and
      hostvars[inventory_hostname].ansible_pipelining is not defined
      }}"

- name: save play context
  when:
  - pipelining_config_origin.msg | d == 'default'
  - ansible_pipelining_is_not_defined | d
  register: current_play_context
  current_play_context:

  ## generate connection plugins with pipelining:
  ##   ag -l 'has_pipelining\s*=\s*True' lib/ansible/plugins/connection \
  ##   | awk -vFS="[./]" '{print $5}' \
  ##   | sort -u \
  ##   | printf "'%s'" $(cat) \
  ##   | sed "s/''/', '/g"

- name: only when pipelining is not defined, and connection supports pipelining
  when:
  - current_play_context is not skipped
  - ([current_play_context.become_method])
    | intersect(['buildah', 'chroot', 'docker', 'httpapi', 'jail', 'kubectl', 'libvirt_lxc', 'local',
                 'lxc', 'lxd', 'network_cli', 'psrp', 'qubes', 'ssh', 'winrm', 'zone'])
    | list
    | length
  block:

  ## check sudo flags for old version
  ## when the become method is sudo, we will check for every remote machine:
  ##   0. have a sudo with -n option (since 1.7): keep default sudo flags;
  ##   1. have a sudo without -n option: remove -n from default sudo flags;
  ##   2. no sudo command, do nothing.
  - name: correct sudo flags
    when:
    - current_play_context.become_method == 'sudo'
    - ( [ current_play_context.become_flags | trim ] ) | intersect(['-H -S -n', '-H -S']) | list | length
    block:
    - name: detecting sudo version
      register: detect_sudo_version
      vars:
        ansible_become: False
        ansible_become_user: "{{ current_play_context.remote_user | d(None) }}"
        ansible_user: "{{ current_play_context.remote_user is defined | ternary(omit, None) }}"
      raw: "{{ current_play_context.become_exe | quote }} -V"
      failed_when: ( [ detect_sudo_version.rc ] ) | intersect([0, 1, 127]) | list | length == 0
      changed_when: False
    - name: update sudo flag
      vars:
      - sudo_version: "{{ detect_sudo_version.stdout_lines
                          | select('match', 'Sudo version .*')
                          | first
                          | d
                          | regex_replace('^[^0-9]*', '')
                          | d('0.0', True) }}"
      - expect_flags: "{{ (sudo_version is version_compare('1.7', '>=')) | ternary('-H -S -n', '-H -S') }}"
      when:
      - detect_sudo_version is not skipped
      - detect_sudo_version.rc == 0 or detect_sudo_version.rc == 1
      - (  detect_sudo_version.stdout_lines
           | select('match', 'Sudo version .*')
           | list
           | length
        or detect_sudo_version.stderr
           | d
           | search('sudo. (invalid|illegal) option')
        )
      - current_play_context is not skipped
      - current_play_context.become_flags | trim != expect_flags
      set_fact:
        ansible_become_flags: "{{  expect_flags }}"

  ## NOTE: When become method is 'su', it will ignore ansible_pipelining,
  ##       so only detect for 'sudo' methods,
  ##       and enable ssh pipelining for all other become methods.
  ##
  ## NOTE: Having remote hosts without 'sudo' command,
  ##       or become flags containing invalid options, we also enable pipelining,
  ##       cause a become-task will always fail in this scenario.
  - name: detecting
    when:
    - current_play_context is not skipped
    - current_play_context.become_method == 'sudo'
    register: detect_pipelining
    vars:
    - ansible_ssh_pipelining: True
    - ansible_pipelining: True
    - ansible_become: True
    - ansible_become_user: root
    - ansible_become_pass: .
    ping:
    failed_when: False
    changed_when: False
    ignore_errors: True

  - name: flipping pipelining
    vars:
    - detect_string: "{{ (detect_pipelining.module_stdout | d) + '\n' + (detect_pipelining.module_stderr | d) }}"
    when:
    - current_play_context is not skipped
    - detect_pipelining is not skipped
    - ansible_pipelining != (
        current_play_context.become_method != 'sudo'
        or
        ( detect_string.find('must have a tty') == -1 and
          detect_string.find('no tty present') == -1
        )
      )
    set_fact:
      ansible_pipelining: "{{ not ansible_pipelining }}"
